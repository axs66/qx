
#import <UIKit/UIKit.h>
#import <objc/runtime.h>
#import "CityManager.h"
#import "AwemeHeaders.h"
#import <AVKit/AVKit.h>  // 用于画中画功能
#import <Photos/Photos.h>  // 用于保存视频到相册。



#define ALERT_INTERVAL (6 * 60 * 60)

static NSString *const pxx917144686_ICON_BASE64 = @"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";

static UIViewController* getActiveTopViewController() {
    UIWindow *window = nil;
    for (UIWindowScene *scene in [UIApplication sharedApplication].connectedScenes) {
        if (scene.activationState == UISceneActivationStateForegroundActive && scene.windows.count > 0) {
            for (UIWindow *win in scene.windows) {
                if (win.isKeyWindow) {
                    window = win;
                    break;
                }
            }
            if (window) break;
        }
    }
    if (!window) {
        return nil;
    }
    UIViewController *rootVC = window.rootViewController;
    while (rootVC.presentedViewController) {
        rootVC = rootVC.presentedViewController;
    }
    return rootVC;
}

static void safePresentViewController(UIViewController *viewController, UIViewController *toPresent) {
    if (viewController.presentedViewController) {
        return;
    }
    dispatch_async(dispatch_get_main_queue(), ^{
        [viewController presentViewController:toPresent animated:YES completion:nil];
    });
}

static UIButton *createModernButton(NSString *title, UIColor *gradientStartColor, UIColor *gradientEndColor, id target) {
    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
    button.translatesAutoresizingMaskIntoConstraints = NO;

    [button.widthAnchor constraintEqualToConstant:120].active = YES;
    [button.heightAnchor constraintEqualToConstant:40].active = YES;

    CAGradientLayer *gradientLayer = [CAGradientLayer layer];
    gradientLayer.colors = @[(id)gradientStartColor.CGColor, (id)gradientEndColor.CGColor];
    gradientLayer.startPoint = CGPointMake(0, 0.5);
    gradientLayer.endPoint = CGPointMake(1, 0.5);
    gradientLayer.frame = button.bounds;
    [button.layer insertSublayer:gradientLayer atIndex:0];

    button.layer.cornerRadius = 20;
    button.layer.masksToBounds = YES;
    button.layer.shadowColor = [UIColor blackColor].CGColor;
    button.layer.shadowOpacity = 0.3;
    button.layer.shadowOffset = CGSizeMake(0, 4);
    button.layer.shadowRadius = 6;

    NSMutableAttributedString *attributedTitle = [[NSMutableAttributedString alloc] initWithString:title];
    NSDictionary *attributes = @{
        NSFontAttributeName: [UIFont systemFontOfSize:16 weight:UIFontWeightSemibold],
        NSForegroundColorAttributeName: [UIColor whiteColor]
    };
    [attributedTitle setAttributes:attributes range:NSMakeRange(0, title.length)];
    [button setAttributedTitle:attributedTitle forState:UIControlStateNormal];

    [button addTarget:target action:@selector(scaleDown:) forControlEvents:UIControlEventTouchDown];
    [button addTarget:target action:@selector(scaleUp:) forControlEvents:UIControlEventTouchUpInside | UIControlEventTouchUpOutside];

    return button;
}

@interface BottomSheetViewController : UIViewController
- (instancetype)initWithTitle:(NSString *)title message:(NSString *)message image:(UIImage *)image actions:(NSArray<UIButton *> *)actionButtons;
@end

@interface BottomSheetPresentationAnimation : NSObject <UIViewControllerAnimatedTransitioning>
@end

@interface BottomSheetDismissalAnimation : NSObject <UIViewControllerAnimatedTransitioning>
@end

@implementation BottomSheetViewController {
    NSString *_title;
    NSString *_message;
    UIImage *_image;
    NSArray<UIButton *> *_actionButtons;
}

- (instancetype)initWithTitle:(NSString *)title message:(NSString *)message image:(UIImage *)image actions:(NSArray<UIButton *> *)actionButtons {
    self = [super init];
    if (self) {
        _title = title;
        _message = message;
        _image = image;
        _actionButtons = actionButtons;
        self.modalPresentationStyle = UIModalPresentationCustom;
    }
    return self;
}

- (id<UIViewControllerAnimatedTransitioning>)animationControllerForPresentedController:(UIViewController *)presented presentingController:(UIViewController *)presenting sourceController:(UIViewController *)source {
    return [[BottomSheetPresentationAnimation alloc] init];
}

- (id<UIViewControllerAnimatedTransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed {
    return [[BottomSheetDismissalAnimation alloc] init];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor clearColor];

    UIView *backgroundView = [[UIView alloc] initWithFrame:self.view.bounds];
    backgroundView.backgroundColor = [UIColor clearColor];
    backgroundView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
    [self.view addSubview:backgroundView];

    UIView *contentView = [[UIView alloc] init];
    contentView.translatesAutoresizingMaskIntoConstraints = NO;
    contentView.backgroundColor = [UIColor whiteColor];
    contentView.layer.cornerRadius = 20;
    contentView.layer.shadowColor = [UIColor blackColor].CGColor;
    contentView.layer.shadowOpacity = 0.3;
    contentView.layer.shadowOffset = CGSizeMake(0, 4);
    contentView.layer.shadowRadius = 6;
    [self.view addSubview:contentView];

    UIImageView *imageView = [[UIImageView alloc] initWithImage:_image];
    imageView.translatesAutoresizingMaskIntoConstraints = NO;
    imageView.animationDuration = _image.duration;
    [imageView startAnimating];
    [contentView addSubview:imageView];

    UILabel *titleLabel = [[UILabel alloc] init];
    titleLabel.text = _title;
    titleLabel.textAlignment = NSTextAlignmentCenter;
    titleLabel.font = [UIFont boldSystemFontOfSize:18];
    titleLabel.textColor = [UIColor blackColor];
    titleLabel.translatesAutoresizingMaskIntoConstraints = NO;
    [contentView addSubview:titleLabel];

    UILabel *messageLabel = [[UILabel alloc] init];
    messageLabel.text = _message;
    messageLabel.textAlignment = NSTextAlignmentCenter;
    messageLabel.numberOfLines = 0;
    messageLabel.textColor = [UIColor systemBlueColor];
    messageLabel.translatesAutoresizingMaskIntoConstraints = NO;
    [contentView addSubview:messageLabel];

    UIStackView *buttonStack = [[UIStackView alloc] initWithArrangedSubviews:_actionButtons];
    buttonStack.axis = UILayoutConstraintAxisHorizontal;
    buttonStack.distribution = UIStackViewDistributionFillEqually;
    buttonStack.spacing = 20;
    buttonStack.translatesAutoresizingMaskIntoConstraints = NO;
    [contentView addSubview:buttonStack];

    [NSLayoutConstraint activateConstraints:@[
        [contentView.leadingAnchor constraintEqualToAnchor:self.view.leadingAnchor constant:20],
        [contentView.trailingAnchor constraintEqualToAnchor:self.view.trailingAnchor constant:-20],
        [contentView.bottomAnchor constraintEqualToAnchor:self.view.bottomAnchor constant:-20],
        [contentView.heightAnchor constraintGreaterThanOrEqualToConstant:250],
    
        [imageView.centerXAnchor constraintEqualToAnchor:contentView.centerXAnchor],
        [imageView.topAnchor constraintEqualToAnchor:contentView.topAnchor constant:20],
        [imageView.widthAnchor constraintEqualToConstant:100],
        [imageView.heightAnchor constraintEqualToConstant:100],
    
        [titleLabel.topAnchor constraintEqualToAnchor:imageView.bottomAnchor constant:10],
        [titleLabel.leadingAnchor constraintEqualToAnchor:contentView.leadingAnchor constant:20],
        [titleLabel.trailingAnchor constraintEqualToAnchor:contentView.trailingAnchor constant:-20],
    
        [messageLabel.topAnchor constraintEqualToAnchor:titleLabel.bottomAnchor constant:10],
        [messageLabel.leadingAnchor constraintEqualToAnchor:contentView.leadingAnchor constant:20],
        [messageLabel.trailingAnchor constraintEqualToAnchor:contentView.trailingAnchor constant:-20],
    
        [buttonStack.topAnchor constraintEqualToAnchor:messageLabel.bottomAnchor constant:20],
        [buttonStack.leadingAnchor constraintEqualToAnchor:contentView.leadingAnchor constant:20],
        [buttonStack.trailingAnchor constraintEqualToAnchor:contentView.trailingAnchor constant:-20],
        [buttonStack.bottomAnchor constraintLessThanOrEqualToAnchor:contentView.bottomAnchor constant:-20]
    ]];
}

@end

@implementation BottomSheetPresentationAnimation

- (NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning>)transitionContext {
    return 0.4;
}

- (void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext {
    UIViewController *toVC = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];
    UIView *toView = toVC.view;
    CGRect initialFrame = CGRectMake(0, [UIScreen mainScreen].bounds.size.height, [UIScreen mainScreen].bounds.size.width, 250);
    toView.frame = initialFrame;
    [transitionContext.containerView addSubview:toView];

    [UIView animateWithDuration:[self transitionDuration:transitionContext]
          delay:0
          usingSpringWithDamping:0.8
          initialSpringVelocity:0
          options:UIViewAnimationOptionCurveEaseInOut
          animations:^{
              toView.frame = CGRectMake(0, [UIScreen mainScreen].bounds.size.height - 250, [UIScreen mainScreen].bounds.size.width, 250);
          } completion:^(BOOL finished) {
              [transitionContext completeTransition:finished];
          }];
}

@end

@implementation BottomSheetDismissalAnimation

- (NSTimeInterval)transitionDuration:(id<UIViewControllerContextTransitioning>)transitionContext {
    return 0.4;
}

- (void)animateTransition:(id<UIViewControllerContextTransitioning>)transitionContext {
    UIViewController *fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];
    UIView *fromView = fromVC.view;

    [UIView animateWithDuration:[self transitionDuration:transitionContext]
          delay:0
          usingSpringWithDamping:0.8
          initialSpringVelocity:0
          options:UIViewAnimationOptionCurveEaseInOut
          animations:^{
              fromView.frame = CGRectMake(0, [UIScreen mainScreen].bounds.size.height, fromView.bounds.size.width, fromView.bounds.size.height);
          } completion:^(BOOL finished) {
              [transitionContext completeTransition:finished];
          }];
}

@end

@interface UIViewController (TweakAdditions)
- (void)showDisclaimerAlert;
- (void)showThirdAlert;
- (void)dismissPresentedAlert;
- (void)scaleDown:(UIButton *)button;
- (void)scaleUp:(UIButton *)button;
@end

UIImage *pxxImage() {
    NSData *imageData = [[NSData alloc] initWithBase64EncodedString:pxx917144686_ICON_BASE64 options:0];
    return [UIImage imageWithData:imageData];
}

%hook UIViewController

- (void)viewDidAppear:(BOOL)animated {
    %orig(animated);

    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    BOOL isFlowCompleted = [defaults boolForKey:@"IsFlowCompleted"];
    NSTimeInterval currentTime = [[NSDate date] timeIntervalSince1970];
    NSTimeInterval lastDismissTime = [defaults doubleForKey:@"LastDismissTime"];
    NSTimeInterval timeDifference = currentTime - lastDismissTime;

    if (isFlowCompleted && timeDifference < ALERT_INTERVAL) {
        return;
    }

    static BOOL isAlertShown = NO;
    if (!isAlertShown) {
        isAlertShown = YES;
        [self showDisclaimerAlert];
    }
}

%new
- (void)showDisclaimerAlert {
    [self showThirdAlert];
}

%new
- (void)showThirdAlert {
    UIButton *thumbUpButton = createModernButton(@"👍", [UIColor systemGreenColor], [UIColor greenColor], self);
    [thumbUpButton addTarget:self action:@selector(thumbUpAction) forControlEvents:UIControlEventTouchUpInside];

    UIButton *thumbDownButton = createModernButton(@"👎", [UIColor systemRedColor], [UIColor systemPinkColor], self);
    [thumbDownButton addTarget:self action:@selector(thumbDownAction) forControlEvents:UIControlEventTouchUpInside];

    BottomSheetViewController *bottomSheet = [[BottomSheetViewController alloc] initWithTitle:@"pxx 更新"
                                                                                     message:@"基于 huamidev 魔改～"
                                                                                       image:pxxImage()
                                                                                     actions:@[thumbUpButton, thumbDownButton]];
    safePresentViewController(getActiveTopViewController(), bottomSheet);
}

%new
- (void)thumbUpAction {
    UIViewController *topVC = getActiveTopViewController();
    if (topVC) {
        [topVC dismissViewControllerAnimated:YES completion:^{
            NSTimeInterval currentTime = [[NSDate date] timeIntervalSince1970];
            NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
            [defaults setDouble:currentTime forKey:@"LastDismissTime"];
            [defaults setBool:YES forKey:@"IsFlowCompleted"];
            [defaults synchronize];
        }];
    }
}

%new
- (void)thumbDownAction {
    [self dismissPresentedAlert];
    NSURL *url = [NSURL URLWithString:@"https://github.com/huami1314/DYYY"];
    if ([[UIApplication sharedApplication] canOpenURL:url]) {
        [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:nil];
    }
}

%new
- (void)dismissPresentedAlert {
    dispatch_async(dispatch_get_main_queue(), ^{
        UIViewController *topVC = getActiveTopViewController();
        if (topVC) {
            [topVC dismissViewControllerAnimated:YES completion:nil];
        }
    });
}

%new
- (void)scaleDown:(UIButton *)button {
    [UIView animateWithDuration:0.2 animations:^{
        button.transform = CGAffineTransformMakeScale(0.9, 0.9);
        button.layer.shadowOpacity = 0.4;
    }];
}

%new
- (void)scaleUp:(UIButton *)button {
    [UIView animateWithDuration:0.2 animations:^{
        button.transform = CGAffineTransformIdentity;
        button.layer.shadowOpacity = 0.3;
    }];
}

%end







@interface AWEAwemePlayVideoViewController (DYYYExtension) <AVPictureInPictureControllerDelegate>
// 获取视频 URL
- (NSString *)getVideoURL;
// 处理双击下载视频
- (void)handleDoubleTap:(UITapGestureRecognizer *)gesture;
// 启动系统画中画模式
- (void)startPiPMode;
// 启动应用内小窗播放
- (void)startAppPiPMode;
// 处理应用内小窗拖动
- (void)handlePan:(UIPanGestureRecognizer *)gesture;
// 关闭应用内小窗
- (void)closePiPView:(UIButton *)sender;
// 更新功能的启用状态
- (void)updateFeatureState:(NSNotification *)notification;
@end

%hook AWEAwemePlayVideoViewController

static UITapGestureRecognizer *doubleTapGesture = nil;
static UIButton *pipButton = nil;

- (void)viewDidLoad {
    %orig; // 调用原始 viewDidLoad 方法

    // 添加通知监听，当开关状态变化时更新功能
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(updateFeatureState:)
                                                 name:NSUserDefaultsDidChangeNotification
                                               object:nil];

    // 初始化并检查功能状态
    [self updateFeatureState:nil];
}

// 更新功能的启用状态
%new
- (void)updateFeatureState:(NSNotification *)notification {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];

    // 检查是否启用双击下载视频
    if ([defaults boolForKey:@"DYYYEnableDoubleTapDownload"]) {
        if (!doubleTapGesture) {
            doubleTapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleDoubleTap:)];
            doubleTapGesture.numberOfTapsRequired = 2; // 设置为双击
            [self.view addGestureRecognizer:doubleTapGesture];
        }
    } else {
        if (doubleTapGesture) {
            [self.view removeGestureRecognizer:doubleTapGesture];
            doubleTapGesture = nil;
        }
    }

    // 检查是否启用画中画模式
    if ([defaults boolForKey:@"DYYYEnablePiPMode"]) {
        if (!pipButton) {
            pipButton = [UIButton buttonWithType:UIButtonTypeCustom];
            [pipButton setTitle:@"画中画" forState:UIControlStateNormal];
            [pipButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
            [pipButton addTarget:self action:@selector(startPiPMode) forControlEvents:UIControlEventTouchUpInside];
            pipButton.frame = CGRectMake(self.view.frame.size.width - 70, self.view.frame.size.height - 120, 50, 50);
            [self.view addSubview:pipButton];
        }
    } else {
        if (pipButton) {
            [pipButton removeFromSuperview];
            pipButton = nil;
        }
    }
}

// 移除通知监听
- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    %orig;
}

// 处理双击下载视频
%new
- (void)handleDoubleTap:(UITapGestureRecognizer *)gesture {
    if (gesture.state != UIGestureRecognizerStateRecognized) return;

    // 检查开关状态
    if (![[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableDoubleTapDownload"]) return;

    // 显示下载提示
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"提示" message:@"正在下载视频..." preferredStyle:UIAlertControllerStyleAlert];
    [self presentViewController:alert animated:YES completion:nil];

    // 获取视频 URL
    NSString *videoURLString = [self getVideoURL];
    if (!videoURLString) {
        NSLog(@"[DYYY] 获取视频地址失败");
        alert.message = @"获取视频地址失败";
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
            [alert dismissViewControllerAnimated:YES completion:nil];
        });
        return;
    }
    NSLog(@"[DYYY] 视频 URL: %@", videoURLString);

    NSURL *videoURL = [NSURL URLWithString:videoURLString];
    NSURL *tempPath = [NSURL fileURLWithPath:[NSTemporaryDirectory() stringByAppendingPathComponent:@"tempVideo.mp4"]];

    // 使用 NSURLSession 下载视频
    NSURLSession *session = [NSURLSession sharedSession];
    NSURLSessionDownloadTask *task = [session downloadTaskWithURL:videoURL completionHandler:^(NSURL *location, NSURLResponse *response, NSError *error) {
        if (error || !location) {
            NSLog(@"[DYYY] 下载失败: %@", error.localizedDescription);
            dispatch_async(dispatch_get_main_queue(), ^{
                alert.message = @"下载失败，请检查网络或URL有效性";
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
                    [alert dismissViewControllerAnimated:YES completion:nil];
                });
            });
            return;
        }

        // 移动下载文件到临时路径
        NSError *moveError;
        [[NSFileManager defaultManager] moveItemAtURL:location toURL:tempPath error:&moveError];
        if (moveError) {
            NSLog(@"[DYYY] 文件移动失败: %@", moveError.localizedDescription);
            dispatch_async(dispatch_get_main_queue(), ^{
                alert.message = @"文件移动失败";
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
                    [alert dismissViewControllerAnimated:YES completion:nil];
                });
            });
            return;
        }

        // 保存视频到相册
        [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
            if (status == PHAuthorizationStatusAuthorized) {
                [[PHPhotoLibrary sharedPhotoLibrary] performChanges:^{
                    [PHAssetCreationRequest creationRequestForAssetFromVideoAtFileURL:tempPath];
                } completionHandler:^(BOOL success, NSError *error) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        if (success) {
                            NSLog(@"[DYYY] 视频保存成功");
                            alert.message = @"下载完成，已保存到相册";
                        } else {
                            NSLog(@"[DYYY] 保存到相册失败: %@", error.localizedDescription);
                            alert.message = @"保存到相册失败";
                        }
                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
                            [alert dismissViewControllerAnimated:YES completion:nil];
                        });
                    });
                }];
            } else {
                NSLog(@"[DYYY] 无相册权限");
                dispatch_async(dispatch_get_main_queue(), ^{
                    alert.message = @"无相册权限，请在设置中开启";
                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC), dispatch_get_main_queue(), ^{
                        [alert dismissViewControllerAnimated:YES completion:nil];
                    });
                });
            }
        }];
    }];
    [task resume];
}

// 启动画中画模式（优先系统画中画）
%new
- (void)startPiPMode {
    // 检查开关状态
    if (![[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiPMode"]) return;

    // 获取原始播放视图
    UIView *playerView = [self valueForKey:@"_playerView"];
    if (!playerView) {
        NSLog(@"[DYYY] 未找到播放视图");
        return;
    }

    CALayer *layer = playerView.layer;
    if (![layer isKindOfClass:[AVPlayerLayer class]]) {
        NSLog(@"[DYYY] 播放层不是 AVPlayerLayer");
        return;
    }

    AVPlayerLayer *playerLayer = (AVPlayerLayer *)layer;
    AVPlayer *player = playerLayer.player;
    if (!player) {
        // 如果没有播放器，使用视频 URL 创建
        NSString *videoURLString = [self getVideoURL];
        if (!videoURLString) {
            NSLog(@"[DYYY] 获取视频 URL 失败");
            return;
        }
        NSURL *videoURL = [NSURL URLWithString:videoURLString];
        player = [AVPlayer playerWithURL:videoURL];
        playerLayer.player = player;
    }

    // 检查是否支持系统画中画
    if ([AVPictureInPictureController isPictureInPictureSupported]) {
        AVPictureInPictureController *pipController = [[AVPictureInPictureController alloc] initWithPlayerLayer:playerLayer];
        pipController.delegate = self;
        [pipController startPictureInPicture];
        NSLog(@"[DYYY] 启动系统画中画");
    } else {
        // 如果不支持系统画中画，回退到应用内小窗
        [self startAppPiPMode];
        NSLog(@"[DYYY] 设备不支持系统画中画，回退到应用内小窗");
    }
}

// 启动应用内小窗播放
%new
- (void)startAppPiPMode {
    // 检查开关状态
    if (![[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnablePiPMode"]) return;

    // 获取原始播放视图并隐藏
    UIView *originalPlayerView = [self valueForKey:@"_playerView"];
    if (!originalPlayerView) return;
    originalPlayerView.hidden = YES; // 隐藏原始播放视图，避免重复显示

    // 创建应用内小窗视图
    UIView *pipView = [[UIView alloc] initWithFrame:CGRectMake(20, 20, 160, 90)];
    pipView.backgroundColor = [UIColor blackColor];
    [self.view addSubview:pipView];

    CALayer *layer = originalPlayerView.layer;
    if (![layer isKindOfClass:[AVPlayerLayer class]]) {
        originalPlayerView.hidden = NO; // 恢复原始视图
        return;
    }

    AVPlayerLayer *originalPlayerLayer = (AVPlayerLayer *)layer;
    AVPlayer *player = originalPlayerLayer.player;
    if (!player) {
        // 如果没有播放器，使用视频 URL 创建
        NSString *videoURLString = [self getVideoURL];
        if (!videoURLString) {
            originalPlayerView.hidden = NO; // 恢复原始视图
            return;
        }
        NSURL *videoURL = [NSURL URLWithString:videoURLString];
        player = [AVPlayer playerWithURL:videoURL];
        originalPlayerLayer.player = player;
    }

    // 为小窗创建新播放层
    AVPlayerLayer *pipPlayerLayer = [AVPlayerLayer playerLayerWithPlayer:player];
    pipPlayerLayer.frame = pipView.bounds;
    [pipView.layer addSublayer:pipPlayerLayer];

    // 添加拖动手势
    UIPanGestureRecognizer *panGesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handlePan:)];
    [pipView addGestureRecognizer:panGesture];

    // 添加关闭按钮
    UIButton *closeButton = [UIButton buttonWithType:UIButtonTypeCustom];
    [closeButton setTitle:@"关闭" forState:UIControlStateNormal];
    [closeButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    [closeButton addTarget:self action:@selector(closePiPView:) forControlEvents:UIControlEventTouchUpInside];
    closeButton.frame = CGRectMake(pipView.bounds.size.width - 40, 0, 40, 20);
    [pipView addSubview:closeButton];
}

// 处理应用内小窗拖动
%new
- (void)handlePan:(UIPanGestureRecognizer *)gesture {
    UIView *pipView = gesture.view;
    CGPoint translation = [gesture translationInView:self.view];
    pipView.center = CGPointMake(pipView.center.x + translation.x, pipView.center.y + translation.y);
    [gesture setTranslation:CGPointZero inView:self.view];
}

// 关闭应用内小窗
%new
- (void)closePiPView:(UIButton *)sender {
    UIView *pipView = sender.superview;
    [pipView removeFromSuperview];

    // 恢复原始播放视图
    UIView *originalPlayerView = [self valueForKey:@"_playerView"];
    if (originalPlayerView) {
        originalPlayerView.hidden = NO;
    }
}

// 获取视频 URL
%new
- (NSString *)getVideoURL {
    id awemeModel = [self valueForKey:@"_awemeModel"];
    if (!awemeModel) {
        NSLog(@"[DYYY] awemeModel is nil");
        return nil;
    }

    id video = [awemeModel valueForKey:@"video"];
    if (!video) {
        NSLog(@"[DYYY] video is nil");
        return nil;
    }

    id playAddr = [video valueForKey:@"playAddr"];
    if (!playAddr) {
        NSLog(@"[DYYY] playAddr is nil");
        return nil;
    }

    NSArray *urlList = [playAddr valueForKey:@"urlList"];
    if (urlList && urlList.count > 0) {
        NSLog(@"[DYYY] urlList: %@", urlList);
        return urlList.firstObject; // 返回 urlList 中的第一个 URL
    }
    return nil;
}

// 处理系统画中画停止
%new
- (void)pictureInPictureControllerDidStopPictureInPicture:(AVPictureInPictureController *)pictureInPictureController {
    // 恢复原始播放视图
    UIView *originalPlayerView = [self valueForKey:@"_playerView"];
    if (originalPlayerView) {
        originalPlayerView.hidden = NO;
    }
}

%end


// ======================================


%hook AWENormalModeTabBarGeneralPlusButton
+ (id)button {
    BOOL isHiddenJia = [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHiddenJia"];
    if (isHiddenJia) {
        return nil;
    }
    return %orig;
}
%end

%hook AWEFeedContainerContentView
- (void)setAlpha:(CGFloat)alpha {
    NSString *transparentValue = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYtopbartransparent"];
    
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnablePure"]) {
        %orig(0.0);
        
        static dispatch_source_t timer = nil;
        static int attempts = 0;
        
        if (timer) {
            dispatch_source_cancel(timer);
            timer = nil;
        }
        
        void (^tryFindAndSetPureMode)(void) = ^{
            Class FeedTableVC = NSClassFromString(@"AWEFeedTableViewController");
            UIViewController *feedVC = nil;
            
            UIViewController *rootVC = getActiveTopViewController();
            if (rootVC) {
                feedVC = [self findViewController:rootVC ofClass:FeedTableVC];
                if (feedVC) {
                    [feedVC setValue:@YES forKey:@"pureMode"];
                    if (timer) {
                        dispatch_source_cancel(timer);
                        timer = nil;
                    }
                    attempts = 0;
                    return;
                }
            }
            
            attempts++;
            if (attempts >= 10) {
                if (timer) {
                    dispatch_source_cancel(timer);
                    timer = nil;
                }
                attempts = 0;
            }
        };
        
        timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, dispatch_get_main_queue());
        dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, 0.5 * NSEC_PER_SEC, 0);
        dispatch_source_set_event_handler(timer, tryFindAndSetPureMode);
        dispatch_resume(timer);
        
        tryFindAndSetPureMode();
        return;
    }
    
    if (transparentValue && transparentValue.length > 0) {
        CGFloat alphaValue = [transparentValue floatValue];
        if (alphaValue >= 0.0 && alphaValue <= 1.0) {
            %orig(alphaValue);
        } else {
            %orig(1.0);
        }
    } else {
        %orig(1.0);
    }
}

%new
- (UIViewController *)findViewController:(UIViewController *)vc ofClass:(Class)targetClass {
    if (!vc) return nil;
    if ([vc isKindOfClass:targetClass]) return vc;
    
    for (UIViewController *childVC in vc.childViewControllers) {
        UIViewController *found = [self findViewController:childVC ofClass:targetClass];
        if (found) return found;
    }
    
    return [self findViewController:vc.presentedViewController ofClass:targetClass];
}
%end

%hook AWEDanmakuContentLabel
- (void)setTextColor:(UIColor *)textColor {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableDanmuColor"]) {
        NSString *danmuColor = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYdanmuColor"];
        
        if ([danmuColor.lowercaseString isEqualToString:@"random"] || [danmuColor.lowercaseString isEqualToString:@"#random"]) {
            textColor = [UIColor colorWithRed:(arc4random_uniform(256)) / 255.0
                                        green:(arc4random_uniform(256)) / 255.0
                                         blue:(arc4random_uniform(256)) / 255.0
                                        alpha:CGColorGetAlpha(textColor.CGColor)];
            self.layer.shadowOffset = CGSizeZero;
            self.layer.shadowOpacity = 0.0;
        } else if ([danmuColor hasPrefix:@"#"]) {
            textColor = [self colorFromHexString:danmuColor baseColor:textColor];
            self.layer.shadowOffset = CGSizeZero;
            self.layer.shadowOpacity = 0.0;
        } else {
            textColor = [self colorFromHexString:@"#FFFFFF" baseColor:textColor];
        }
    }
    %orig(textColor);
}

%new
- (UIColor *)colorFromHexString:(NSString *)hexString baseColor:(UIColor *)baseColor {
    if ([hexString hasPrefix:@"#"]) {
        hexString = [hexString substringFromIndex:1];
    }
    if ([hexString length] != 6) {
        return [baseColor colorWithAlphaComponent:1];
    }
    unsigned int red, green, blue;
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(0, 2)]] scanHexInt:&red];
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(2, 2)]] scanHexInt:&green];
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(4, 2)]] scanHexInt:&blue];
    return [UIColor colorWithRed:(red / 255.0) green:(green / 255.0) blue:(blue / 255.0) alpha:CGColorGetAlpha(baseColor.CGColor)];
}
%end

%hook AWEDanmakuItemTextInfo
- (void)setDanmakuTextColor:(id)arg1 {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYEnableDanmuColor"]) {
        NSString *danmuColor = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYdanmuColor"];
        
        if ([danmuColor.lowercaseString isEqualToString:@"random"] || [danmuColor.lowercaseString isEqualToString:@"#random"]) {
            arg1 = [UIColor colorWithRed:(arc4random_uniform(256)) / 255.0
                                   green:(arc4random_uniform(256)) / 255.0
                                    blue:(arc4random_uniform(256)) / 255.0
                                   alpha:1.0];
        } else if ([danmuColor hasPrefix:@"#"]) {
            arg1 = [self colorFromHexStringForTextInfo:danmuColor];
        } else {
            arg1 = [self colorFromHexStringForTextInfo:@"#FFFFFF"];
        }
    }
    %orig(arg1);
}

%new
- (UIColor *)colorFromHexStringForTextInfo:(NSString *)hexString {
    if ([hexString hasPrefix:@"#"]) {
        hexString = [hexString substringFromIndex:1];
    }
    if ([hexString length] != 6) {
        return [UIColor whiteColor];
    }
    unsigned int red, green, blue;
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(0, 2)]] scanHexInt:&red];
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(2, 2)]] scanHexInt:&green];
    [[NSScanner scannerWithString:[hexString substringWithRange:NSMakeRange(4, 2)]] scanHexInt:&blue];
    return [UIColor colorWithRed:(red / 255.0) green:(green / 255.0) blue:(blue / 255.0) alpha:1.0];
}
%end

%hook UIWindow
- (instancetype)initWithFrame:(CGRect)frame {
    UIWindow *window = %orig(frame);
    if (window) {
        UILongPressGestureRecognizer *doubleFingerLongPressGesture = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handleDoubleFingerLongPressGesture:)];
        doubleFingerLongPressGesture.numberOfTouchesRequired = 2;
        [window addGestureRecognizer:doubleFingerLongPressGesture];
    }
    return window;
}

%new
- (void)handleDoubleFingerLongPressGesture:(UILongPressGestureRecognizer *)gesture {
    if (gesture.state == UIGestureRecognizerStateBegan) {
        UIViewController *rootViewController = self.rootViewController;
        if (rootViewController) {
            UIViewController *settingVC = [[NSClassFromString(@"DYYYSettingViewController") alloc] init];
            
            if (settingVC) {
                if (@available(iOS 15.0, *)) {
                    if (UIDevice.currentDevice.userInterfaceIdiom != UIUserInterfaceIdiomPad) {
                        settingVC.modalPresentationStyle = UIModalPresentationPageSheet;
                    } else {
                        settingVC.modalPresentationStyle = UIModalPresentationFullScreen;
                        
                        UIButton *closeButton = [UIButton buttonWithType:UIButtonTypeSystem];
                        [closeButton setTitle:@"关闭" forState:UIControlStateNormal];
                        closeButton.translatesAutoresizingMaskIntoConstraints = NO;
                        [settingVC.view addSubview:closeButton];
                        
                        [NSLayoutConstraint activateConstraints:@[
                            [closeButton.trailingAnchor constraintEqualToAnchor:settingVC.view.trailingAnchor constant:-10],
                            [closeButton.topAnchor constraintEqualToAnchor:settingVC.view.topAnchor constant:40],
                            [closeButton.widthAnchor constraintEqualToConstant:80],
                            [closeButton.heightAnchor constraintEqualToConstant:40]
                        ]];
                        
                        [closeButton addTarget:self action:@selector(closeSettings:) forControlEvents:UIControlEventTouchUpInside];
                    }
                } else {
                    settingVC.modalPresentationStyle = UIModalPresentationFullScreen;
                    
                    UIButton *closeButton = [UIButton buttonWithType:UIButtonTypeSystem];
                    [closeButton setTitle:@"关闭" forState:UIControlStateNormal];
                    closeButton.translatesAutoresizingMaskIntoConstraints = NO;
                    [settingVC.view addSubview:closeButton];
                    
                    [NSLayoutConstraint activateConstraints:@[
                        [closeButton.trailingAnchor constraintEqualToAnchor:settingVC.view.trailingAnchor constant:-10],
                        [closeButton.topAnchor constraintEqualToAnchor:settingVC.view.topAnchor constant:40],
                        [closeButton.widthAnchor constraintEqualToConstant:80],
                        [closeButton.heightAnchor constraintEqualToConstant:40]
                    ]];
                    
                    [closeButton addTarget:self action:@selector(closeSettings:) forControlEvents:UIControlEventTouchUpInside];
                }
                
                UIView *handleBar = [[UIView alloc] init];
                handleBar.backgroundColor = [UIColor whiteColor];
                handleBar.layer.cornerRadius = 2.5;
                handleBar.translatesAutoresizingMaskIntoConstraints = NO;
                [settingVC.view addSubview:handleBar];
                
                [NSLayoutConstraint activateConstraints:@[
                    [handleBar.centerXAnchor constraintEqualToAnchor:settingVC.view.centerXAnchor],
                    [handleBar.topAnchor constraintEqualToAnchor:settingVC.view.topAnchor constant:8],
                    [handleBar.widthAnchor constraintEqualToConstant:40],
                    [handleBar.heightAnchor constraintEqualToConstant:5]
                ]];
                
                [rootViewController presentViewController:settingVC animated:YES completion:nil];
            }
        }
    }
}

%new
- (void)closeSettings:(UIButton *)button {
    [button.superview.window.rootViewController dismissViewControllerAnimated:YES completion:nil];
}
%end

%hook AWEFeedLiveMarkView
- (void)setHidden:(BOOL)hidden {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideAvatarButton"]) {
        hidden = YES;
    }
    %orig(hidden);
}
%end

%hook AWELongVideoControlModel
- (bool)allowDownload {
    return YES;
}
- (long long)preventDownloadType {
    return 0;
}
%end

%hook AWELandscapeFeedEntryView
- (void)setHidden:(BOOL)hidden {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHiddenEntry"]) {
        hidden = YES;
    }
    %orig(hidden);
}
%end

%hook AWEAwemeModel
- (void)live_callInitWithDictyCategoryMethod:(id)arg1 {
    if (self.currentAweme && [self.currentAweme isLive] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisSkipLive"]) {
        return;
    }
    %orig;
}

+ (id)liveStreamURLJSONTransformer {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisSkipLive"] ? nil : %orig;
}

+ (id)relatedLiveJSONTransformer {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisSkipLive"] ? nil : %orig;
}

+ (id)rawModelFromLiveRoomModel:(id)arg1 {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisSkipLive"] ? nil : %orig;
}

+ (id)aweLiveRoom_subModelPropertyKey {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisSkipLive"] ? nil : %orig;
}

- (void)setIsAds:(BOOL)isAds {
    %orig(NO);
}
%end

%hook AWEPlayInteractionViewController
- (void)viewDidLayoutSubviews {
    %orig;
    if (![self.parentViewController isKindOfClass:%c(AWEFeedCellViewController)]) {
        return;
    }
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        CGRect frame = self.view.frame;
        frame.size.height = self.view.superview.frame.size.height - 83;
        self.view.frame = frame;
        
        for (UIView *subview in self.view.subviews) {
            if ([subview isKindOfClass:[UIView class]] && 
                subview.backgroundColor && 
                CGColorEqualToColor(subview.backgroundColor.CGColor, [UIColor blackColor].CGColor)) {
                subview.hidden = YES;
            }
        }
    }
}
%end

%hook AWEStoryContainerCollectionView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        for (UIView *subview in self.subviews) {
            if ([subview isKindOfClass:[UIView class]]) {
                CGRect frame = subview.frame;
                frame.size.height = subview.superview.frame.size.height - 83;
                subview.frame = frame;
            }
        }
    }
}
%end

%hook AWEFeedTableView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        CGRect frame = self.frame;
        frame.size.height = self.superview.frame.size.height;
        self.frame = frame;
    }
}
%end

%hook AWEPlayInteractionProgressContainerView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        for (UIView *subview in self.subviews) {
            if ([subview class] == [UIView class]) {
                [subview setBackgroundColor:[UIColor clearColor]];
            }
        }
    }
}
%end

%hook UIView
- (void)setFrame:(CGRect)frame {
    if (![[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableCommentBlur"]) {
        %orig;
        return;
    }
    UIViewController *vc = [self firstAvailableUIViewController];
    if ([vc isKindOfClass:%c(AWEAwemePlayVideoViewController)]) {
        if (frame.origin.x != 0 || frame.origin.y != 0) {
            return;
        }
    }
    %orig;
}

- (void)setAlpha:(CGFloat)alpha {
    UIViewController *vc = [self firstAvailableUIViewController];
    if ([vc isKindOfClass:%c(AWEPlayInteractionViewController)] && alpha > 0) {
        NSString *transparentValue = [[NSUserDefaults standardUserDefaults] stringForKey:@"DYYYGlobalTransparency"];
        if (transparentValue.length > 0) {
            CGFloat alphaValue = transparentValue.floatValue;
            if (alphaValue >= 0.0 && alphaValue <= 1.0) {
                %orig(alphaValue);
                return;
            }
        }
    }
    %orig;
}

- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
        for (UIView *subview in self.subviews) {
            if ([subview isKindOfClass:NSClassFromString(@"AWECommentInputViewSwiftImpl.CommentInputViewMiddleContainer")]) {
                for (UIView *innerSubview in subview.subviews) {
                    if ([innerSubview isKindOfClass:[UIView class]]) {
                        innerSubview.backgroundColor = [UIColor colorWithRed:31/255.0 green:33/255.0 blue:35/255.0 alpha:1.0];
                        break;
                    }
                }
            }
            if ([subview isKindOfClass:NSClassFromString(@"AWEIMEmoticonPanelBoxView")]) {
                subview.backgroundColor = [UIColor colorWithRed:33/255.0 green:33/255.0 blue:33/255.0 alpha:1.0];
            }
        }
    }
}

%new
- (UIViewController *)firstAvailableUIViewController {
    UIResponder *responder = [self nextResponder];
    while (responder != nil) {
        if ([responder isKindOfClass:[UIViewController class]]) {
            return (UIViewController *)responder;
        }
        responder = [responder nextResponder];
    }
    return nil;
}
%end

%hook AWEBaseListViewController
- (void)viewDidLayoutSubviews {
    %orig;
    [self applyBlurEffectIfNeeded];
}

- (void)viewDidAppear:(BOOL)animated {
    %orig;
    [self applyBlurEffectIfNeeded];
}

- (void)viewWillAppear:(BOOL)animated {
    %orig;
    [self applyBlurEffectIfNeeded];
}

%new
- (void)applyBlurEffectIfNeeded {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableCommentBlur"] && 
        [self isKindOfClass:NSClassFromString(@"AWECommentPanelContainerSwiftImpl.CommentContainerInnerViewController")]) {
        
        self.view.backgroundColor = [UIColor clearColor];
        for (UIView *subview in self.view.subviews) {
            if (![subview isKindOfClass:[UIVisualEffectView class]]) {
                subview.backgroundColor = [UIColor clearColor];
            }
        }
        
        UIVisualEffectView *existingBlurView = nil;
        for (UIView *subview in self.view.subviews) {
            if ([subview isKindOfClass:[UIVisualEffectView class]] && subview.tag == 999) {
                existingBlurView = (UIVisualEffectView *)subview;
                break;
            }
        }
        
        if (!existingBlurView) {
            UIBlurEffectStyle blurStyle;
            if (@available(iOS 13.0, *)) {
                blurStyle = self.traitCollection.userInterfaceStyle == UIUserInterfaceStyleDark ? 
                    UIBlurEffectStyleDark : UIBlurEffectStyleLight;
            } else {
                blurStyle = UIBlurEffectStyleLight;
            }
            
            UIBlurEffect *blurEffect = [UIBlurEffect effectWithStyle:blurStyle];
            UIVisualEffectView *blurEffectView = [[UIVisualEffectView alloc] initWithEffect:blurEffect];
            blurEffectView.frame = self.view.bounds;
            blurEffectView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
            blurEffectView.alpha = 0.98;
            blurEffectView.tag = 999;
            
            UIView *overlayView = [[UIView alloc] initWithFrame:self.view.bounds];
            CGFloat alpha = blurStyle == UIBlurEffectStyleDark ? 0.3 : 0.1;
            overlayView.backgroundColor = [UIColor colorWithWhite:(blurStyle == UIBlurEffectStyleDark ? 0 : 1) alpha:alpha];
            overlayView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
            [blurEffectView.contentView addSubview:overlayView];
            
            [self.view insertSubview:blurEffectView atIndex:0];
        } else {
            [self.view insertSubview:existingBlurView atIndex:0];
        }
    }
}
%end

%hook AFDFastSpeedView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        for (UIView *subview in self.subviews) {
            if ([subview class] == [UIView class]) {
                [subview setBackgroundColor:[UIColor clearColor]];
            }
        }
    }
}
%end

%hook AWENormalModeTabBarBadgeContainerView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHiddenBottomDot"]) {
        for (UIView *subview in [self subviews]) {
            if ([subview isKindOfClass:NSClassFromString(@"DUXBadge")]) {
                [subview setHidden:YES];
            }
        }
    }
}
%end

%hook AWELeftSideBarEntranceView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHiddenSidebarDot"]) {
        for (UIView *subview in [self subviews]) {
            if ([subview isKindOfClass:NSClassFromString(@"DUXBadge")]) {
                subview.hidden = YES;
            }
        }
    }
}
%end

%hook AWEFeedVideoButton
- (void)layoutSubviews {
    %orig;
    NSString *accessibilityLabel = self.accessibilityLabel;
    if ([accessibilityLabel isEqualToString:@"点赞"] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideLikeButton"]) {
        [self removeFromSuperview];
    } else if ([accessibilityLabel isEqualToString:@"评论"] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideCommentButton"]) {
        [self removeFromSuperview];
    } else if ([accessibilityLabel isEqualToString:@"分享"] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideShareButton"]) {
        [self removeFromSuperview];
    } else if ([accessibilityLabel isEqualToString:@"收藏"] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideCollectButton"]) {
        [self removeFromSuperview];
    }
}

- (id)touchUpInsideBlock {
    id r = %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYcollectTips"] && [self.accessibilityLabel isEqualToString:@"收藏"]) {
        dispatch_async(dispatch_get_main_queue(), ^{
            UIAlertController *alertController = [UIAlertController
                                                  alertControllerWithTitle:@"收藏确认"
                                                  message:@"是否[确认/取消]收藏？"
                                                  preferredStyle:UIAlertControllerStyleAlert];
            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
            UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                if (r && [r isKindOfClass:NSClassFromString(@"NSBlock")]) {
                    ((void(^)(void))r)();
                }
            }];
            [alertController addAction:cancelAction];
            [alertController addAction:confirmAction];
            UIViewController *topController = getActiveTopViewController();
            while (topController.presentedViewController) {
                topController = topController.presentedViewController;
            }
            [topController presentViewController:alertController animated:YES completion:nil];
        });
        return nil;
    }
    return r;
}
%end

%hook AWEMusicCoverButton
- (void)layoutSubviews {
    %orig;
    if ([self.accessibilityLabel isEqualToString:@"音乐详情"] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMusicButton"]) {
        [self removeFromSuperview];
    }
}
%end

%hook AWEPlayInteractionListenFeedView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMusicButton"]) {
        [self removeFromSuperview];
    }
}
%end

%hook AWEPlayInteractionFollowPromptView
- (void)layoutSubviews {
    %orig;
    if ([self.accessibilityLabel isEqualToString:@"关注"] && [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideAvatarButton"]) {
        [self removeFromSuperview];
    }
}
%end

%hook AWEAdAvatarView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideAvatarButton"]) {
        [self removeFromSuperview];
    }
}
%end

%hook AWENormalModeTabBar
- (void)layoutSubviews {
    %orig;
    BOOL hideShop = [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideShopButton"];
    BOOL hideMsg = [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMessageButton"];
    BOOL hideFri = [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideFriendsButton"];
    
    NSMutableArray *visibleButtons = [NSMutableArray array];
    Class generalButtonClass = %c(AWENormalModeTabBarGeneralButton);
    Class plusButtonClass = %c(AWENormalModeTabBarGeneralPlusButton);
    
    for (UIView *subview in self.subviews) {
        if (![subview isKindOfClass:generalButtonClass] && ![subview isKindOfClass:plusButtonClass]) continue;
        
        NSString *label = subview.accessibilityLabel;
        BOOL shouldHide = NO;
        
        if ([label isEqualToString:@"商城"]) {
            shouldHide = hideShop;
        } else if ([label containsString:@"消息"]) {
            shouldHide = hideMsg;
        } else if ([label containsString:@"朋友"]) {
            shouldHide = hideFri;
        }
        
        if (!shouldHide) {
            [visibleButtons addObject:subview];
        } else {
            [subview removeFromSuperview];
        }
    }

    [visibleButtons sortUsingComparator:^NSComparisonResult(UIView* a, UIView* b) {
        return [@(a.frame.origin.x) compare:@(b.frame.origin.x)];
    }];

    CGFloat totalWidth = self.bounds.size.width;
    CGFloat buttonWidth = totalWidth / visibleButtons.count;
    
    for (NSInteger i = 0; i < visibleButtons.count; i++) {
        UIView *button = visibleButtons[i];
        button.frame = CGRectMake(i * buttonWidth, button.frame.origin.y, buttonWidth, button.frame.size.height);
    }

    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHiddenBottomBg"] || [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableFullScreen"]) {
        for (UIView *subview in self.subviews) {
            if ([subview class] == [UIView class]) {
                BOOL hasImageView = NO;
                for (UIView *childView in subview.subviews) {
                    if ([childView isKindOfClass:[UIImageView class]]) {
                        hasImageView = YES;
                        break;
                    }
                }
                if (hasImageView) {
                    subview.hidden = YES;
                    break;
                }
            }
        }
    }
}
%end

%hook UITextInputTraits
- (void)setKeyboardAppearance:(UIKeyboardAppearance)appearance {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
        %orig(UIKeyboardAppearanceDark);
    } else {
        %orig;
    }
}
%end

%hook AWECommentMiniEmoticonPanelView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
        for (UIView *subview in self.subviews) {
            if ([subview isKindOfClass:[UICollectionView class]]) {
                subview.backgroundColor = [UIColor colorWithRed:115/255.0 green:115/255.0 blue:115/255.0 alpha:1.0];
            }
        }
    }
}
%end

%hook AWECommentPublishGuidanceView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
        for (UIView *subview in self.subviews) {
            if ([subview isKindOfClass:[UICollectionView class]]) {
                subview.backgroundColor = [UIColor colorWithRed:115/255.0 green:115/255.0 blue:115/255.0 alpha:1.0];
            }
        }
    }
}
%end

%hook UILabel
- (void)setText:(NSString *)text {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
        if ([text hasPrefix:@"善语"] || [text hasPrefix:@"友爱评论"] || [text hasPrefix:@"回复"]) {
            self.textColor = [UIColor colorWithRed:125/255.0 green:125/255.0 blue:125/255.0 alpha:0.6];
        }
    }
    %orig;
}
%end

%hook UIButton
- (void)setImage:(UIImage *)image forState:(UIControlState)state {
    NSString *label = self.accessibilityLabel;
    if ([label isEqualToString:@"表情"] || [label isEqualToString:@"at"] || [label isEqualToString:@"图片"] || [label isEqualToString:@"键盘"]) {
        if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
            UIImage *whiteImage = [image imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
            self.tintColor = [UIColor whiteColor];
            %orig(whiteImage, state);
        } else {
            %orig(image, state);
        }
    } else {
        %orig(image, state);
    }
}
%end

%hook AWETextViewInternal
- (void)drawRect:(CGRect)rect {
    %orig(rect);
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
        self.textColor = [UIColor whiteColor];
    }
}

- (double)lineSpacing {
    double r = %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisDarkKeyBoard"]) {
        self.textColor = [UIColor whiteColor];
    }
    return r;
}
%end

%hook AWEPlayInteractionUserAvatarElement
- (void)onFollowViewClicked:(UITapGestureRecognizer *)gesture {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYfollowTips"]) {
        dispatch_async(dispatch_get_main_queue(), ^{
            UIAlertController *alertController = [UIAlertController
                                                  alertControllerWithTitle:@"关注确认"
                                                  message:@"是否确认关注？"
                                                  preferredStyle:UIAlertControllerStyleAlert];
            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
            UIAlertAction *confirmAction = [UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                %orig(gesture);
            }];
            [alertController addAction:cancelAction];
            [alertController addAction:confirmAction];
            UIViewController *topController = getActiveTopViewController();
            while (topController.presentedViewController) {
                topController = topController.presentedViewController;
            }
            [topController presentViewController:alertController animated:YES completion:nil];
        });
    } else {
        %orig;
    }
}
%end

%hook AWEFeedProgressSlider
- (void)setAlpha:(CGFloat)alpha {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisShowSchedule"]) {
        alpha = 1.0;
        %orig(alpha);
    } else {
        %orig;
    }
}
%end

%hook AWENormalModeTabBarTextView
- (void)layoutSubviews {
    %orig;
    NSString *indexTitle = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYIndexTitle"];
    NSString *friendsTitle = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYFriendsTitle"];
    NSString *msgTitle = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYMsgTitle"];
    NSString *selfTitle = [[NSUserDefaults standardUserDefaults] objectForKey:@"DYYYSelfTitle"];
    
    for (UIView *subview in [self subviews]) {
        if ([subview isKindOfClass:[UILabel class]]) {
            UILabel *label = (UILabel *)subview;
            if ([label.text isEqualToString:@"首页"] && indexTitle.length > 0) {
                [label setText:indexTitle];
                [self setNeedsLayout];
            }
            if ([label.text isEqualToString:@"朋友"] && friendsTitle.length > 0) {
                [label setText:friendsTitle];
                [self setNeedsLayout];
            }
            if ([label.text isEqualToString:@"消息"] && msgTitle.length > 0) {
                [label setText:msgTitle];
                [self setNeedsLayout];
            }
            if ([label.text isEqualToString:@"我"] && selfTitle.length > 0) {
                [label setText:selfTitle];
                [self setNeedsLayout];
            }
        }
    }
}
%end

%hook AWEFeedIPhoneAutoPlayManager
- (BOOL)isAutoPlayOpen {
    BOOL r = %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableAutoPlay"]) {
        return YES;
    }
    return r;
}
%end

%hook AWEHPTopTabItemModel
- (void)setChannelID:(NSString *)channelID {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    if (([channelID isEqualToString:@"homepage_hot_container"] && [defaults boolForKey:@"DYYYHideHotContainer"]) ||
        ([channelID isEqualToString:@"homepage_follow"] && [defaults boolForKey:@"DYYYHideFollow"]) ||
        ([channelID isEqualToString:@"homepage_mediumvideo"] && [defaults boolForKey:@"DYYYHideMediumVideo"]) ||
        ([channelID isEqualToString:@"homepage_mall"] && [defaults boolForKey:@"DYYYHideMall"]) ||
        ([channelID isEqualToString:@"homepage_nearby"] && [defaults boolForKey:@"DYYYHideNearby"]) ||
        ([channelID isEqualToString:@"homepage_groupon"] && [defaults boolForKey:@"DYYYHideGroupon"]) ||
        ([channelID isEqualToString:@"homepage_tablive"] && [defaults boolForKey:@"DYYYHideTabLive"]) ||
        ([channelID isEqualToString:@"homepage_pad_hot"] && [defaults boolForKey:@"DYYYHidePadHot"]) ||
        ([channelID isEqualToString:@"homepage_hangout"] && [defaults boolForKey:@"DYYYHideHangout"])) {
        return;
    }
    %orig;
}
%end

%hook AWEPlayInteractionTimestampElement
- (id)timestampLabel {
    UILabel *label = %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableArea"]) {
        NSString *text = label.text;
        NSString *cityCode = self.model.cityCode;
        
        if (cityCode.length > 0) {
            NSString *cityName = [CityManager.sharedInstance getCityNameWithCode:cityCode] ?: @"";
            NSString *provinceName = [CityManager.sharedInstance getProvinceNameWithCode:cityCode] ?: @"";
            
            if (cityName.length > 0 && ![text containsString:cityName]) {
                if (!self.model.ipAttribution) {
                    if ([provinceName isEqualToString:cityName]) {
                        label.text = [NSString stringWithFormat:@"%@  IP属地：%@", text, cityName];
                    } else {
                        label.text = [NSString stringWithFormat:@"%@  IP属地：%@ %@", text, provinceName, cityName];
                    }
                } else {
                    label.text = [NSString stringWithFormat:@"%@ %@", text, cityName];
                }
            }
        }
    }
    return label;
}

+ (BOOL)shouldActiveWithData:(id)arg1 context:(id)arg2 {
    return [[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisEnableArea"];
}
%end

%hook AWEFeedRootViewController
- (BOOL)prefersStatusBarHidden {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYisHideStatusbar"]) {
        return YES;
    } else {
        return %orig;
    }
}
%end

%hook AWEHPDiscoverFeedEntranceView
- (void)setAlpha:(CGFloat)alpha {
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideDiscover"]) {
        alpha = 0;
        %orig(alpha);
    } else {
        %orig;
    }
}
%end

%hook AWEUserWorkCollectionViewComponentCell
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMyPage"]) {
        [self removeFromSuperview];
    }
}
%end

%hook AWEFeedRefreshFooter
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMyPage"]) {
        [self removeFromSuperview];
    }
}
%end

%hook AWERLSegmentView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideMyPage"]) {
        [self removeFromSuperview];
    }
}
%end

%hook AWEFeedTemplateAnchorView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideLocation"]) {
        [self removeFromSuperview];
    }
}
%end

%hook AWEPlayInteractionSearchAnchorView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideInteractionSearch"]) {
        [self removeFromSuperview];
    }
}
%end

%hook AWEAwemeMusicInfoView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideQuqishuiting"]) {
        self.hidden = YES;
    }
}
%end

%hook AWETemplateHotspotView
- (void)layoutSubviews {
    %orig;
    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"DYYYHideHotspot"]) {
        [self removeFromSuperview];
    }
}
%end